Boot process
=============

Our kernels should take the form::

    /boot/vmlinuz-$VERSION-$RELEASE
    /boot/config-$VERSION-$RELEASE
    /boot/initrd.img-$VERSION-RELEASE
    /vmlinuz -> boot/vmlinuz-$VERSION-$RELEASE
    /initrd.img -> boot/initrd.img-$VERSION-$RELEASE

Dracut Changes
==============

Remove handling from dracut, and put this in *each* kernel modules
post-install.

On post-install, kernel should::

    /sbin/depmod $VERSION-$RELEASE
    dracut --kver $VERSION-$RELEASE -f blahblah..

Packaging changes
=================

Split kernel-libc-devel into it's own package, simply providing::

    /usr/include/*

This can be achieved with a simple package.yml, and *must* replace
the old package, which is to be removed from "kernel" source package.

Advise::

    linux-libc-devel
    # This is what it is, dev for klibc stuff

Or::

    linux-devel
    # Prettier, not quite accurate.


Changes to kernel package
=========================

The current "kernel" package will need to be removed. We'll create a
new package, with the "linux-" specifier, branched by MAJOR.MINOR::

    linux-4.1
    linux-4.1-headers
    linux-4.1-modules

    linux-4.3
    linux-4.3-headers
    linux-4.3-modules

    # future
    linux-4.4
    linux-4.4-headers
    linux-4.4-modules

Meta-packages
=============

In addition to the distinct branch policy, we'd maintain two meta-packages
to control upgrade and build flow

    *linux-lts*:

        Depend on latest LTS kernel (linux-4.1)

    *linux-lts-modules*:

        Depend on latest LTS modules (linux-4.1-modules)

    *linux-lts-headers*:

        Depend on latest LTS headers (linux-4.1-headers)

    *linux-mainline*:
        Depends on latest **stable** mainline kernel (linux-4.3)

    *linux-mainline-modules*:

        Depend on latest **stable** mainline kernel modules (linux-4.3-modules)

    *linux-mainline-headers*:

        Depend on latest **stable** mainline kernel headers (linux-4.3-headers)


Replacements
============

To facilitate the upgrade process, we'll use Replaces/Obsoletes to swap users
from the legacy "kernel*" packages to the new LTS branch::

    kernel         -> linux-lts
    kernel-modules -> linux-lts-modules
    kernel-headers -> linux-lts-headers

UEFI considerations:
======================

Each kernel post-installs its own namespaced kernel::

    /boot/efi/com.solus-project.$VERSION.$RELEASE.kernel
    /boot/efi/com.solus-project.$VERSION.$RELEASE.initrd

Matching /boot/efi/loader/entries/com.solus-project.$VERSION.$RELEASE::

    title Solus $VERSION-$RELEASE
    linux /com.solus-project.$VERSION.$RELEASE.kernel
    initrd /com.solus-project.$VERSION.$RELEASE.initrd
    options root=$(THEIR ROOT) $(DEFAULT_OPTIONS)


Possibility
===========

Create a `linux-common` package in the legacy format to handle both the
depmod aspect, and `dracut` generation for all the kernel packages, which
would enable all kernel packages to be in the newer `package.yml` format
and built entirely with YPKG.
